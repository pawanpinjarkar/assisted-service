// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openshift/assisted-service/models"
)

// GetClusterIgnitionConfigOKCode is the HTTP code returned for type GetClusterIgnitionConfigOK
const GetClusterIgnitionConfigOKCode int = 200

/*GetClusterIgnitionConfigOK Success.

swagger:response getClusterIgnitionConfigOK
*/
type GetClusterIgnitionConfigOK struct {

	/*
	  In: Body
	*/
	Payload *models.IgnitionConfigParams `json:"body,omitempty"`
}

// NewGetClusterIgnitionConfigOK creates GetClusterIgnitionConfigOK with default headers values
func NewGetClusterIgnitionConfigOK() *GetClusterIgnitionConfigOK {

	return &GetClusterIgnitionConfigOK{}
}

// WithPayload adds the payload to the get cluster ignition config o k response
func (o *GetClusterIgnitionConfigOK) WithPayload(payload *models.IgnitionConfigParams) *GetClusterIgnitionConfigOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster ignition config o k response
func (o *GetClusterIgnitionConfigOK) SetPayload(payload *models.IgnitionConfigParams) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterIgnitionConfigOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetClusterIgnitionConfigUnauthorizedCode is the HTTP code returned for type GetClusterIgnitionConfigUnauthorized
const GetClusterIgnitionConfigUnauthorizedCode int = 401

/*GetClusterIgnitionConfigUnauthorized Unauthorized.

swagger:response getClusterIgnitionConfigUnauthorized
*/
type GetClusterIgnitionConfigUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewGetClusterIgnitionConfigUnauthorized creates GetClusterIgnitionConfigUnauthorized with default headers values
func NewGetClusterIgnitionConfigUnauthorized() *GetClusterIgnitionConfigUnauthorized {

	return &GetClusterIgnitionConfigUnauthorized{}
}

// WithPayload adds the payload to the get cluster ignition config unauthorized response
func (o *GetClusterIgnitionConfigUnauthorized) WithPayload(payload *models.InfraError) *GetClusterIgnitionConfigUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster ignition config unauthorized response
func (o *GetClusterIgnitionConfigUnauthorized) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterIgnitionConfigUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetClusterIgnitionConfigForbiddenCode is the HTTP code returned for type GetClusterIgnitionConfigForbidden
const GetClusterIgnitionConfigForbiddenCode int = 403

/*GetClusterIgnitionConfigForbidden Forbidden.

swagger:response getClusterIgnitionConfigForbidden
*/
type GetClusterIgnitionConfigForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.InfraError `json:"body,omitempty"`
}

// NewGetClusterIgnitionConfigForbidden creates GetClusterIgnitionConfigForbidden with default headers values
func NewGetClusterIgnitionConfigForbidden() *GetClusterIgnitionConfigForbidden {

	return &GetClusterIgnitionConfigForbidden{}
}

// WithPayload adds the payload to the get cluster ignition config forbidden response
func (o *GetClusterIgnitionConfigForbidden) WithPayload(payload *models.InfraError) *GetClusterIgnitionConfigForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster ignition config forbidden response
func (o *GetClusterIgnitionConfigForbidden) SetPayload(payload *models.InfraError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterIgnitionConfigForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetClusterIgnitionConfigNotFoundCode is the HTTP code returned for type GetClusterIgnitionConfigNotFound
const GetClusterIgnitionConfigNotFoundCode int = 404

/*GetClusterIgnitionConfigNotFound Error.

swagger:response getClusterIgnitionConfigNotFound
*/
type GetClusterIgnitionConfigNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetClusterIgnitionConfigNotFound creates GetClusterIgnitionConfigNotFound with default headers values
func NewGetClusterIgnitionConfigNotFound() *GetClusterIgnitionConfigNotFound {

	return &GetClusterIgnitionConfigNotFound{}
}

// WithPayload adds the payload to the get cluster ignition config not found response
func (o *GetClusterIgnitionConfigNotFound) WithPayload(payload *models.Error) *GetClusterIgnitionConfigNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster ignition config not found response
func (o *GetClusterIgnitionConfigNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterIgnitionConfigNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetClusterIgnitionConfigMethodNotAllowedCode is the HTTP code returned for type GetClusterIgnitionConfigMethodNotAllowed
const GetClusterIgnitionConfigMethodNotAllowedCode int = 405

/*GetClusterIgnitionConfigMethodNotAllowed Method Not Allowed.

swagger:response getClusterIgnitionConfigMethodNotAllowed
*/
type GetClusterIgnitionConfigMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetClusterIgnitionConfigMethodNotAllowed creates GetClusterIgnitionConfigMethodNotAllowed with default headers values
func NewGetClusterIgnitionConfigMethodNotAllowed() *GetClusterIgnitionConfigMethodNotAllowed {

	return &GetClusterIgnitionConfigMethodNotAllowed{}
}

// WithPayload adds the payload to the get cluster ignition config method not allowed response
func (o *GetClusterIgnitionConfigMethodNotAllowed) WithPayload(payload *models.Error) *GetClusterIgnitionConfigMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster ignition config method not allowed response
func (o *GetClusterIgnitionConfigMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterIgnitionConfigMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetClusterIgnitionConfigInternalServerErrorCode is the HTTP code returned for type GetClusterIgnitionConfigInternalServerError
const GetClusterIgnitionConfigInternalServerErrorCode int = 500

/*GetClusterIgnitionConfigInternalServerError Error.

swagger:response getClusterIgnitionConfigInternalServerError
*/
type GetClusterIgnitionConfigInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetClusterIgnitionConfigInternalServerError creates GetClusterIgnitionConfigInternalServerError with default headers values
func NewGetClusterIgnitionConfigInternalServerError() *GetClusterIgnitionConfigInternalServerError {

	return &GetClusterIgnitionConfigInternalServerError{}
}

// WithPayload adds the payload to the get cluster ignition config internal server error response
func (o *GetClusterIgnitionConfigInternalServerError) WithPayload(payload *models.Error) *GetClusterIgnitionConfigInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster ignition config internal server error response
func (o *GetClusterIgnitionConfigInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterIgnitionConfigInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
