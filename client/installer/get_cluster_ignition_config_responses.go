// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openshift/assisted-service/models"
)

// GetClusterIgnitionConfigReader is a Reader for the GetClusterIgnitionConfig structure.
type GetClusterIgnitionConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetClusterIgnitionConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetClusterIgnitionConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetClusterIgnitionConfigUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetClusterIgnitionConfigForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetClusterIgnitionConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetClusterIgnitionConfigMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetClusterIgnitionConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetClusterIgnitionConfigOK creates a GetClusterIgnitionConfigOK with default headers values
func NewGetClusterIgnitionConfigOK() *GetClusterIgnitionConfigOK {
	return &GetClusterIgnitionConfigOK{}
}

/*GetClusterIgnitionConfigOK handles this case with default header values.

Success.
*/
type GetClusterIgnitionConfigOK struct {
	Payload string
}

func (o *GetClusterIgnitionConfigOK) Error() string {
	return fmt.Sprintf("[GET /clusters/{cluster_id}/ignition-config][%d] getClusterIgnitionConfigOK  %+v", 200, o.Payload)
}

func (o *GetClusterIgnitionConfigOK) GetPayload() string {
	return o.Payload
}

func (o *GetClusterIgnitionConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClusterIgnitionConfigUnauthorized creates a GetClusterIgnitionConfigUnauthorized with default headers values
func NewGetClusterIgnitionConfigUnauthorized() *GetClusterIgnitionConfigUnauthorized {
	return &GetClusterIgnitionConfigUnauthorized{}
}

/*GetClusterIgnitionConfigUnauthorized handles this case with default header values.

Unauthorized.
*/
type GetClusterIgnitionConfigUnauthorized struct {
	Payload *models.InfraError
}

func (o *GetClusterIgnitionConfigUnauthorized) Error() string {
	return fmt.Sprintf("[GET /clusters/{cluster_id}/ignition-config][%d] getClusterIgnitionConfigUnauthorized  %+v", 401, o.Payload)
}

func (o *GetClusterIgnitionConfigUnauthorized) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *GetClusterIgnitionConfigUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClusterIgnitionConfigForbidden creates a GetClusterIgnitionConfigForbidden with default headers values
func NewGetClusterIgnitionConfigForbidden() *GetClusterIgnitionConfigForbidden {
	return &GetClusterIgnitionConfigForbidden{}
}

/*GetClusterIgnitionConfigForbidden handles this case with default header values.

Forbidden.
*/
type GetClusterIgnitionConfigForbidden struct {
	Payload *models.InfraError
}

func (o *GetClusterIgnitionConfigForbidden) Error() string {
	return fmt.Sprintf("[GET /clusters/{cluster_id}/ignition-config][%d] getClusterIgnitionConfigForbidden  %+v", 403, o.Payload)
}

func (o *GetClusterIgnitionConfigForbidden) GetPayload() *models.InfraError {
	return o.Payload
}

func (o *GetClusterIgnitionConfigForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfraError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClusterIgnitionConfigNotFound creates a GetClusterIgnitionConfigNotFound with default headers values
func NewGetClusterIgnitionConfigNotFound() *GetClusterIgnitionConfigNotFound {
	return &GetClusterIgnitionConfigNotFound{}
}

/*GetClusterIgnitionConfigNotFound handles this case with default header values.

Error.
*/
type GetClusterIgnitionConfigNotFound struct {
	Payload *models.Error
}

func (o *GetClusterIgnitionConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /clusters/{cluster_id}/ignition-config][%d] getClusterIgnitionConfigNotFound  %+v", 404, o.Payload)
}

func (o *GetClusterIgnitionConfigNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetClusterIgnitionConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClusterIgnitionConfigMethodNotAllowed creates a GetClusterIgnitionConfigMethodNotAllowed with default headers values
func NewGetClusterIgnitionConfigMethodNotAllowed() *GetClusterIgnitionConfigMethodNotAllowed {
	return &GetClusterIgnitionConfigMethodNotAllowed{}
}

/*GetClusterIgnitionConfigMethodNotAllowed handles this case with default header values.

Method Not Allowed.
*/
type GetClusterIgnitionConfigMethodNotAllowed struct {
	Payload *models.Error
}

func (o *GetClusterIgnitionConfigMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /clusters/{cluster_id}/ignition-config][%d] getClusterIgnitionConfigMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetClusterIgnitionConfigMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetClusterIgnitionConfigMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClusterIgnitionConfigInternalServerError creates a GetClusterIgnitionConfigInternalServerError with default headers values
func NewGetClusterIgnitionConfigInternalServerError() *GetClusterIgnitionConfigInternalServerError {
	return &GetClusterIgnitionConfigInternalServerError{}
}

/*GetClusterIgnitionConfigInternalServerError handles this case with default header values.

Error.
*/
type GetClusterIgnitionConfigInternalServerError struct {
	Payload *models.Error
}

func (o *GetClusterIgnitionConfigInternalServerError) Error() string {
	return fmt.Sprintf("[GET /clusters/{cluster_id}/ignition-config][%d] getClusterIgnitionConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *GetClusterIgnitionConfigInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetClusterIgnitionConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
